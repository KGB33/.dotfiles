# Git Dotfiles
alias .git='git --git-dir=$HOME/.dotfiles/ --work-tree=$HOME'

# Activate python venvs and auto-update pip
alias venv='. .venv/bin/activate && python -m pip install --upgrade pip'

# eza
alias ls="eza -F --group-directories-first --icons"
alias la="eza -Flbha --group-directories-first --icons"
alias ll="eza -Flbh --git --group-directories-first --icons"
alias lt="eza -TF --git-ignore --group-directories-first --icons"
alias lta="eza -TF --group-directories-first --icons"

# When SSH breaks, use ssk to copy kitty terminfo over
# https://sw.kovidgoyal.net/kitty/faq.html
#i-get-errors-about-the-terminal-being-unknown-or-opening-the-terminal-failing-when-sshing-into-a-different-computer
alias ssk="kitty +kitten ssh"

# set ip to always use color
alias ip="ip -color=always"

# Get my public IP address
alias pubIp="curl ifconfig.co/"

# Change alias top to btop++
alias top="btop"

# Reboot to windows
alias gametime="systemctl reboot --boot-loader-entry=auto-windows"

# Alias for gradle run to prevent gradle output from polluting the console.
alias gradleRun="gradle run -q --console=plain"

# Aliases for a clean home dir (xdg-ninja)
alias wget=wget --hsts-file="$XDG_DATA_HOME/wget-hsts"

# Convert a DOS line ending file to Unix, and vice versa
alias dos2unix="sed -i 's/$//'" 
alias unix2dos="sed -i 's/$///'" 

# Open & fuzzy find obsidian notes
alias obs='nvim $(fd . --extension md ~/notes/obsidianVault | fzf)'


# Display the IP addrs of runnging docker containers 
function dockerip () {
for ID in $(docker ps -q | awk '{print $1}'); do
    IP=$(docker inspect --format="{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}" "$ID")
    NAME=$(docker ps | grep "$ID" | awk '{print $NF}')
    printf "%s %s\n" "$IP" "$NAME"
done
}

# Open current git repo in Github 
function git_remote_open() {
	remote=$(git remote get-url origin)
	if [[ $remote =~ ^git@ ]]; then 
		url=${remote%.git}
		url=${url#git@}
		url=https://${url/://}
	elif [[ $remote =~ ^http ]]; then 
		url=${remote%.git}
	fi
	xdg-open "$url"
}

# Create a Kubeseal secret
function sealSecret() {
    if [[ $# -eq 0 ]]; then
        echo "Useage: sealSecret secretName secretValue namespace"
        return 1
    fi
    echo -n $2 | kubectl create secret generic $1 --dry-run=client --from-file=$1=/dev/stdin -o yaml -n $3 | kubeseal -o yaml
}

# Nixos Stuff
alias pkg="sudoedit /etc/nixos/packages/default.nix"
alias update="cd /etc/nixos && sudo nix flake update && sudo nixos-rebuild switch || cd -" 
alias nrs="cd /etc/nixos && sudo nixos-rebuild switch || cd -" 
